version: '3.8'

services:
  app:
    build: .
    ports:
      - "8008:8008"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    env_file:
      - .env.docker
    environment:
      - POSTGRES_SERVER=db  # 覆盖.env.docker中的配置，确保在容器环境中使用正确的数据库主机
    volumes:
      - ./app:/app/app
      - ./logs:/app/logs
    restart: always

  db:
    image: ankane/pgvector:latest
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - .env.docker
    ports:
      - "15432:5432"
    restart: always
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    command: [
      "postgres", 
      "-c", "max_connections=200",
      "-c", "shared_buffers=256MB",
      "-c", "effective_cache_size=768MB",
      "-c", "maintenance_work_mem=64MB",
      "-c", "random_page_cost=1.1",
      "-c", "effective_io_concurrency=200",
      "-c", "work_mem=16MB",
      "-c", "min_wal_size=1GB",
      "-c", "max_wal_size=4GB",
      "-c", "timezone=Asia/Shanghai"
    ]

  redis:
    image: redis:7-alpine
    ports:
      - "6380:6379"  # 使用6380端口避免与系统已占用的6379端口冲突
    networks:
      - app-network
    restart: always
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes

  celery-worker:
    build: .
    networks:
      - app-network
    env_file:
      - .env.docker
    environment:
      - SERVICE_TYPE=celery-worker
    depends_on:
      - redis
      - db
    volumes:
      - ./app:/app/app
    restart: always

  celery-beat:
    build: .
    networks:
      - app-network
    env_file:
      - .env.docker
    environment:
      - SERVICE_TYPE=celery-beat
    depends_on:
      - redis
      - db
    volumes:
      - ./app:/app/app
    restart: always

  frontend:
      build:
        context: ./frontend
        dockerfile: Dockerfile
        args:
          # 从 env_file 或宿主环境读取，以避免硬编码
          NEXT_PUBLIC_API_BASE_URL: ${NEXT_PUBLIC_API_BASE_URL-/api/v1}
      ports:
        - "3000:3000"
      networks:
        - app-network
      depends_on:
        - app
      env_file:
        - ./frontend/.env.docker
      environment:
        - NODE_ENV=production
        
volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge